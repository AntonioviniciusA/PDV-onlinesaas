{"ast":null,"code":"// services/authService.js\nimport { apiNoAuth, apiAuth } from \"./conection\";\n\n// Cache para estado de autenticação\nlet authStateCache = {\n  isAuthenticated: null,\n  user: null\n};\nexport const AuthService = {\n  // Armazena os dados de autenticação\n  setAuthData: (token, user, remember = false) => {\n    const storage = remember ? localStorage : sessionStorage;\n    storage.setItem(\"token\", token);\n    storage.setItem(\"user\", JSON.stringify(user));\n    authStateCache = {\n      isAuthenticated: true,\n      user\n    };\n  },\n  // Limpa os dados de autenticação\n  clearAuth: () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    sessionStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"user\");\n    authStateCache = {\n      isAuthenticated: false,\n      user: null\n    };\n  },\n  // Login Cliente\n  loginCliente: async (loginData, remember = false) => {\n    try {\n      const response = await apiNoAuth.post(\"/cliente/login\", loginData);\n      const {\n        token,\n        user\n      } = response.data;\n      AuthService.setAuthData(token, user, remember);\n      return {\n        token,\n        user\n      };\n    } catch (error) {\n      console.error(\"Erro ao fazer login de cliente:\", error);\n      throw error;\n    }\n  },\n  // Login Parceiro SaaS\n  loginParceiroSaas: async (loginData, remember = false) => {\n    try {\n      const response = await apiNoAuth.post(\"/parceiro-saas/login\", loginData);\n      const {\n        token,\n        user\n      } = response.data;\n      AuthService.setAuthData(token, user, remember);\n      return {\n        token,\n        user\n      };\n    } catch (error) {\n      console.error(\"Erro ao fazer login de parceiro SaaS:\", error);\n      throw error;\n    }\n  },\n  // Cadastro Cliente\n  registerCliente: async userData => {\n    try {\n      const response = await apiNoAuth.post(\"/cliente/register\", userData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Erro ao registrar cliente:\", error);\n      throw error;\n    }\n  },\n  // Cadastro Parceiro SaaS\n  registerParceiroSaas: async userData => {\n    try {\n      const response = await apiNoAuth.post(\"/parceiro-saas/register\", userData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Erro ao registrar parceiro SaaS:\", error);\n      throw error;\n    }\n  },\n  // Reset Password\n  resetPassword: async email => {\n    try {\n      const response = await apiNoAuth.post(\"/auth/reset-password\", {\n        email\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Erro ao redefinir senha:\", error);\n      throw error;\n    }\n  },\n  // Update Profile\n  updateProfile: async userData => {\n    try {\n      const response = await apiAuth.put(\"/auth/profile\", userData);\n\n      // Atualiza o usuário no storage se necessário\n      if (response.data.user) {\n        const user = response.data.user;\n        const currentUser = AuthService.getUser();\n        if (currentUser) {\n          const storage = localStorage.getItem(\"token\") ? localStorage : sessionStorage;\n          storage.setItem(\"user\", JSON.stringify(user));\n          authStateCache.user = user;\n        }\n      }\n      return response.data;\n    } catch (error) {\n      console.error(\"Erro ao atualizar perfil:\", error);\n      throw error;\n    }\n  },\n  // Change Password\n  changePassword: async (currentPassword, newPassword) => {\n    try {\n      const response = await apiAuth.post(\"/auth/change-password\", {\n        currentPassword,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Erro ao alterar senha:\", error);\n      throw error;\n    }\n  },\n  // Verificar se está autenticado\n  isAuthenticated: async () => {\n    // console.log(\"authStateCache\", authStateCache);\n    if (authStateCache.isAuthenticated !== null) {\n      // console.log(\n      //   \"authStateCache.isAuthenticated2\",\n      //   authStateCache.isAuthenticated\n      // );\n      return authStateCache.isAuthenticated;\n    }\n    // console.log(\"iniciando verificacao de autenticacao\");\n    const token = AuthService.getToken();\n    if (!token) {\n      authStateCache.isAuthenticated = false;\n      return false;\n    }\n    try {\n      const response = await apiAuth.get(\"/verify-token\");\n      authStateCache = {\n        isAuthenticated: true,\n        user: response.data.user || AuthService.getUser()\n      };\n      return true;\n    } catch (error) {\n      AuthService.clearAuth();\n      return false;\n    }\n  },\n  // Obter token\n  getToken: () => {\n    return localStorage.getItem(\"token\") || sessionStorage.getItem(\"token\");\n  },\n  // Obter usuário\n  getUser: () => {\n    const user = localStorage.getItem(\"user\") || sessionStorage.getItem(\"user\");\n    return user ? JSON.parse(user) : null;\n  },\n  // Obter estado atual de autenticação (síncrono)\n  getAuthState: () => {\n    return {\n      ...authStateCache\n    };\n  }\n};\n\n// Debug logs (opcional)\nif (process.env.NODE_ENV !== \"production\") {\n  console.log(\"AuthService configurado com:\");\n  console.log(\"apiNoAuth base URL:\", apiNoAuth.defaults.baseURL);\n  console.log(\"apiAuth base URL:\", apiAuth.defaults.baseURL);\n}","map":{"version":3,"names":["apiNoAuth","apiAuth","authStateCache","isAuthenticated","user","AuthService","setAuthData","token","remember","storage","localStorage","sessionStorage","setItem","JSON","stringify","clearAuth","removeItem","loginCliente","loginData","response","post","data","error","console","loginParceiroSaas","registerCliente","userData","registerParceiroSaas","resetPassword","email","updateProfile","put","currentUser","getUser","getItem","changePassword","currentPassword","newPassword","getToken","get","parse","getAuthState","process","env","NODE_ENV","log","defaults","baseURL"],"sources":["/home/v/Documentos/Github/PDV-onlinesaas/pdv-react-pwa/src/services/authServices.js"],"sourcesContent":["// services/authService.js\nimport { apiNoAuth, apiAuth } from \"./conection\";\n\n// Cache para estado de autenticação\nlet authStateCache = {\n  isAuthenticated: null,\n  user: null,\n};\n\nexport const AuthService = {\n  // Armazena os dados de autenticação\n  setAuthData: (token, user, remember = false) => {\n    const storage = remember ? localStorage : sessionStorage;\n    storage.setItem(\"token\", token);\n    storage.setItem(\"user\", JSON.stringify(user));\n    authStateCache = { isAuthenticated: true, user };\n  },\n\n  // Limpa os dados de autenticação\n  clearAuth: () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    sessionStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"user\");\n    authStateCache = { isAuthenticated: false, user: null };\n  },\n\n  // Login Cliente\n  loginCliente: async (loginData, remember = false) => {\n    try {\n      const response = await apiNoAuth.post(\"/cliente/login\", loginData);\n      const { token, user } = response.data;\n      AuthService.setAuthData(token, user, remember);\n      return { token, user };\n    } catch (error) {\n      console.error(\"Erro ao fazer login de cliente:\", error);\n      throw error;\n    }\n  },\n\n  // Login Parceiro SaaS\n  loginParceiroSaas: async (loginData, remember = false) => {\n    try {\n      const response = await apiNoAuth.post(\"/parceiro-saas/login\", loginData);\n      const { token, user } = response.data;\n      AuthService.setAuthData(token, user, remember);\n      return { token, user };\n    } catch (error) {\n      console.error(\"Erro ao fazer login de parceiro SaaS:\", error);\n      throw error;\n    }\n  },\n\n  // Cadastro Cliente\n  registerCliente: async (userData) => {\n    try {\n      const response = await apiNoAuth.post(\"/cliente/register\", userData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Erro ao registrar cliente:\", error);\n      throw error;\n    }\n  },\n\n  // Cadastro Parceiro SaaS\n  registerParceiroSaas: async (userData) => {\n    try {\n      const response = await apiNoAuth.post(\n        \"/parceiro-saas/register\",\n        userData\n      );\n      return response.data;\n    } catch (error) {\n      console.error(\"Erro ao registrar parceiro SaaS:\", error);\n      throw error;\n    }\n  },\n\n  // Reset Password\n  resetPassword: async (email) => {\n    try {\n      const response = await apiNoAuth.post(\"/auth/reset-password\", { email });\n      return response.data;\n    } catch (error) {\n      console.error(\"Erro ao redefinir senha:\", error);\n      throw error;\n    }\n  },\n\n  // Update Profile\n  updateProfile: async (userData) => {\n    try {\n      const response = await apiAuth.put(\"/auth/profile\", userData);\n\n      // Atualiza o usuário no storage se necessário\n      if (response.data.user) {\n        const user = response.data.user;\n        const currentUser = AuthService.getUser();\n\n        if (currentUser) {\n          const storage = localStorage.getItem(\"token\")\n            ? localStorage\n            : sessionStorage;\n          storage.setItem(\"user\", JSON.stringify(user));\n          authStateCache.user = user;\n        }\n      }\n\n      return response.data;\n    } catch (error) {\n      console.error(\"Erro ao atualizar perfil:\", error);\n      throw error;\n    }\n  },\n\n  // Change Password\n  changePassword: async (currentPassword, newPassword) => {\n    try {\n      const response = await apiAuth.post(\"/auth/change-password\", {\n        currentPassword,\n        newPassword,\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Erro ao alterar senha:\", error);\n      throw error;\n    }\n  },\n  // Verificar se está autenticado\n  isAuthenticated: async () => {\n    // console.log(\"authStateCache\", authStateCache);\n    if (authStateCache.isAuthenticated !== null) {\n      // console.log(\n      //   \"authStateCache.isAuthenticated2\",\n      //   authStateCache.isAuthenticated\n      // );\n      return authStateCache.isAuthenticated;\n    }\n    // console.log(\"iniciando verificacao de autenticacao\");\n    const token = AuthService.getToken();\n    if (!token) {\n      authStateCache.isAuthenticated = false;\n      return false;\n    }\n\n    try {\n      const response = await apiAuth.get(\"/verify-token\");\n      authStateCache = {\n        isAuthenticated: true,\n        user: response.data.user || AuthService.getUser(),\n      };\n      return true;\n    } catch (error) {\n      AuthService.clearAuth();\n      return false;\n    }\n  },\n\n  // Obter token\n  getToken: () => {\n    return localStorage.getItem(\"token\") || sessionStorage.getItem(\"token\");\n  },\n\n  // Obter usuário\n  getUser: () => {\n    const user = localStorage.getItem(\"user\") || sessionStorage.getItem(\"user\");\n    return user ? JSON.parse(user) : null;\n  },\n\n  // Obter estado atual de autenticação (síncrono)\n  getAuthState: () => {\n    return { ...authStateCache };\n  },\n};\n\n// Debug logs (opcional)\nif (process.env.NODE_ENV !== \"production\") {\n  console.log(\"AuthService configurado com:\");\n  console.log(\"apiNoAuth base URL:\", apiNoAuth.defaults.baseURL);\n  console.log(\"apiAuth base URL:\", apiAuth.defaults.baseURL);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}