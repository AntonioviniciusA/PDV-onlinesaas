{"ast":null,"code":"// Utility function to calculate comparative price based on unit\nexport function calculateComparativePrice(price, quantity, measureUnit) {\n  if (!price || !quantity || !measureUnit) return null;\n  const pricePerUnit = price / quantity;\n\n  // Convert to common unit for comparison (kg for weight, L for volume, etc.)\n  let convertedPrice;\n  switch (measureUnit.toLowerCase()) {\n    case \"kg\":\n    case \"kilo\":\n      convertedPrice = pricePerUnit;\n      break;\n    case \"g\":\n    case \"grama\":\n      convertedPrice = pricePerUnit * 1000;\n      break;\n    case \"l\":\n    case \"litro\":\n      convertedPrice = pricePerUnit;\n      break;\n    case \"ml\":\n    case \"mililitro\":\n      convertedPrice = pricePerUnit * 1000;\n      break;\n    case \"un\":\n    case \"unidade\":\n      convertedPrice = pricePerUnit;\n      break;\n    default:\n      convertedPrice = pricePerUnit;\n  }\n  return convertedPrice;\n}\n\n// Format price for display\nexport function formatPrice(price) {\n  return new Intl.NumberFormat(\"pt-BR\", {\n    style: \"currency\",\n    currency: \"BRL\"\n  }).format(price);\n}\n\n// Convert between units\nexport function convertUnit(value, fromUnit, toUnit) {\n  var _conversions$fromUnit;\n  const conversions = {\n    // Weight conversions\n    g: {\n      kg: 0.001,\n      g: 1\n    },\n    kg: {\n      g: 1000,\n      kg: 1\n    },\n    // Volume conversions\n    ml: {\n      l: 0.001,\n      ml: 1\n    },\n    l: {\n      ml: 1000,\n      l: 1\n    },\n    // Default\n    un: {\n      un: 1\n    }\n  };\n  const conversion = (_conversions$fromUnit = conversions[fromUnit]) === null || _conversions$fromUnit === void 0 ? void 0 : _conversions$fromUnit[toUnit];\n  return conversion ? value * conversion : value;\n}","map":{"version":3,"names":["calculateComparativePrice","price","quantity","measureUnit","pricePerUnit","convertedPrice","toLowerCase","formatPrice","Intl","NumberFormat","style","currency","format","convertUnit","value","fromUnit","toUnit","_conversions$fromUnit","conversions","g","kg","ml","l","un","conversion"],"sources":["/home/v/Documentos/Github/PDV-onlinesaas/pdv-react-pwa/src/components/unit-converter.js"],"sourcesContent":["// Utility function to calculate comparative price based on unit\nexport function calculateComparativePrice(price, quantity, measureUnit) {\n  if (!price || !quantity || !measureUnit) return null;\n\n  const pricePerUnit = price / quantity;\n\n  // Convert to common unit for comparison (kg for weight, L for volume, etc.)\n  let convertedPrice;\n  switch (measureUnit.toLowerCase()) {\n    case \"kg\":\n    case \"kilo\":\n      convertedPrice = pricePerUnit;\n      break;\n    case \"g\":\n    case \"grama\":\n      convertedPrice = pricePerUnit * 1000;\n      break;\n    case \"l\":\n    case \"litro\":\n      convertedPrice = pricePerUnit;\n      break;\n    case \"ml\":\n    case \"mililitro\":\n      convertedPrice = pricePerUnit * 1000;\n      break;\n    case \"un\":\n    case \"unidade\":\n      convertedPrice = pricePerUnit;\n      break;\n    default:\n      convertedPrice = pricePerUnit;\n  }\n\n  return convertedPrice;\n}\n\n// Format price for display\nexport function formatPrice(price) {\n  return new Intl.NumberFormat(\"pt-BR\", {\n    style: \"currency\",\n    currency: \"BRL\",\n  }).format(price);\n}\n\n// Convert between units\nexport function convertUnit(value, fromUnit, toUnit) {\n  const conversions = {\n    // Weight conversions\n    g: { kg: 0.001, g: 1 },\n    kg: { g: 1000, kg: 1 },\n    // Volume conversions\n    ml: { l: 0.001, ml: 1 },\n    l: { ml: 1000, l: 1 },\n    // Default\n    un: { un: 1 },\n  };\n\n  const conversion = conversions[fromUnit]?.[toUnit];\n  return conversion ? value * conversion : value;\n}\n"],"mappings":"AAAA;AACA,OAAO,SAASA,yBAAyBA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,WAAW,EAAE;EACtE,IAAI,CAACF,KAAK,IAAI,CAACC,QAAQ,IAAI,CAACC,WAAW,EAAE,OAAO,IAAI;EAEpD,MAAMC,YAAY,GAAGH,KAAK,GAAGC,QAAQ;;EAErC;EACA,IAAIG,cAAc;EAClB,QAAQF,WAAW,CAACG,WAAW,CAAC,CAAC;IAC/B,KAAK,IAAI;IACT,KAAK,MAAM;MACTD,cAAc,GAAGD,YAAY;MAC7B;IACF,KAAK,GAAG;IACR,KAAK,OAAO;MACVC,cAAc,GAAGD,YAAY,GAAG,IAAI;MACpC;IACF,KAAK,GAAG;IACR,KAAK,OAAO;MACVC,cAAc,GAAGD,YAAY;MAC7B;IACF,KAAK,IAAI;IACT,KAAK,WAAW;MACdC,cAAc,GAAGD,YAAY,GAAG,IAAI;MACpC;IACF,KAAK,IAAI;IACT,KAAK,SAAS;MACZC,cAAc,GAAGD,YAAY;MAC7B;IACF;MACEC,cAAc,GAAGD,YAAY;EACjC;EAEA,OAAOC,cAAc;AACvB;;AAEA;AACA,OAAO,SAASE,WAAWA,CAACN,KAAK,EAAE;EACjC,OAAO,IAAIO,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE;EACZ,CAAC,CAAC,CAACC,MAAM,CAACX,KAAK,CAAC;AAClB;;AAEA;AACA,OAAO,SAASY,WAAWA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,MAAM,EAAE;EAAA,IAAAC,qBAAA;EACnD,MAAMC,WAAW,GAAG;IAClB;IACAC,CAAC,EAAE;MAAEC,EAAE,EAAE,KAAK;MAAED,CAAC,EAAE;IAAE,CAAC;IACtBC,EAAE,EAAE;MAAED,CAAC,EAAE,IAAI;MAAEC,EAAE,EAAE;IAAE,CAAC;IACtB;IACAC,EAAE,EAAE;MAAEC,CAAC,EAAE,KAAK;MAAED,EAAE,EAAE;IAAE,CAAC;IACvBC,CAAC,EAAE;MAAED,EAAE,EAAE,IAAI;MAAEC,CAAC,EAAE;IAAE,CAAC;IACrB;IACAC,EAAE,EAAE;MAAEA,EAAE,EAAE;IAAE;EACd,CAAC;EAED,MAAMC,UAAU,IAAAP,qBAAA,GAAGC,WAAW,CAACH,QAAQ,CAAC,cAAAE,qBAAA,uBAArBA,qBAAA,CAAwBD,MAAM,CAAC;EAClD,OAAOQ,UAAU,GAAGV,KAAK,GAAGU,UAAU,GAAGV,KAAK;AAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}