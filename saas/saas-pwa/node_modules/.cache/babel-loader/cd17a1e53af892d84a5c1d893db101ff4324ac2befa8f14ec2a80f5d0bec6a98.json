{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport { salvarCupomOffline, recuperarCuponsOffline, limparCuponsOffline, contarCuponsOffline } from \"../utils/cupomStorage\";\nimport { buildApiUrl, apiRequest } from \"../utils/api-config\";\nexport function useOfflineSync() {\n  _s();\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [pendingCupons, setPendingCupons] = useState(0);\n  const [isSyncing, setIsSyncing] = useState(false);\n\n  // Verificar status da conexão\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      syncCuponsOffline();\n    };\n    const handleOffline = () => {\n      setIsOnline(false);\n    };\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n    };\n  }, []);\n\n  // Atualizar contador de cupons pendentes\n  useEffect(() => {\n    const updatePendingCount = async () => {\n      const count = await contarCuponsOffline();\n      setPendingCupons(count);\n    };\n    updatePendingCount();\n\n    // Atualizar a cada 5 segundos\n    const interval = setInterval(updatePendingCount, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Função para salvar cupom offline\n  const salvarCupom = useCallback(async cupom => {\n    try {\n      if (!isOnline) {\n        await salvarCupomOffline(cupom);\n        setPendingCupons(prev => prev + 1);\n        return {\n          success: true,\n          offline: true\n        };\n      }\n      return {\n        success: true,\n        offline: false\n      };\n    } catch (error) {\n      console.error(\"Erro ao salvar cupom:\", error);\n      return {\n        success: false,\n        error\n      };\n    }\n  }, [isOnline]);\n\n  // Função para sincronizar cupons offline\n  const syncCuponsOffline = useCallback(async () => {\n    if (!isOnline || isSyncing) return;\n    setIsSyncing(true);\n    try {\n      const cupons = await recuperarCuponsOffline();\n      if (cupons.length === 0) {\n        setIsSyncing(false);\n        return;\n      }\n      let successCount = 0;\n      let errorCount = 0;\n      for (const cupom of cupons) {\n        try {\n          const response = await apiRequest(buildApiUrl(\"/api/cupom\"), {\n            method: \"POST\",\n            body: JSON.stringify(cupom)\n          });\n          if (response.ok) {\n            successCount++;\n          } else {\n            errorCount++;\n          }\n        } catch (error) {\n          console.error(\"Erro ao enviar cupom:\", error);\n          errorCount++;\n        }\n      }\n\n      // Se todos os cupons foram enviados com sucesso, limpar o cache\n      if (errorCount === 0) {\n        await limparCuponsOffline();\n        setPendingCupons(0);\n\n        // Mostrar notificação de sucesso\n        if (successCount > 0) {\n          showNotification(`${successCount} cupons sincronizados com sucesso!`);\n        }\n      } else {\n        // Se houve erros, manter os cupons que falharam\n        setPendingCupons(errorCount);\n        showNotification(`${successCount} cupons sincronizados, ${errorCount} falharam.`);\n      }\n    } catch (error) {\n      console.error(\"Erro na sincronização:\", error);\n      showNotification(\"Erro na sincronização dos cupons.\");\n    } finally {\n      setIsSyncing(false);\n    }\n  }, [isOnline, isSyncing]);\n\n  // Função para mostrar notificações\n  const showNotification = useCallback(message => {\n    if (\"Notification\" in window && Notification.permission === \"granted\") {\n      new Notification(\"Dominus PDV\", {\n        body: message,\n        icon: \"/logo192.png\"\n      });\n    } else {\n      // Fallback para toast ou alert\n      console.log(message);\n    }\n  }, []);\n\n  // Solicitar permissão para notificações\n  const requestNotificationPermission = useCallback(async () => {\n    if (\"Notification\" in window && Notification.permission === \"default\") {\n      const permission = await Notification.requestPermission();\n      return permission === \"granted\";\n    }\n    return Notification.permission === \"granted\";\n  }, []);\n  return {\n    isOnline,\n    pendingCupons,\n    isSyncing,\n    salvarCupom,\n    syncCuponsOffline,\n    requestNotificationPermission\n  };\n}\n_s(useOfflineSync, \"1kPeHX0+nn8/E+PiiUExbBje9lI=\");","map":{"version":3,"names":["useState","useEffect","useCallback","salvarCupomOffline","recuperarCuponsOffline","limparCuponsOffline","contarCuponsOffline","buildApiUrl","apiRequest","useOfflineSync","_s","isOnline","setIsOnline","navigator","onLine","pendingCupons","setPendingCupons","isSyncing","setIsSyncing","handleOnline","syncCuponsOffline","handleOffline","window","addEventListener","removeEventListener","updatePendingCount","count","interval","setInterval","clearInterval","salvarCupom","cupom","prev","success","offline","error","console","cupons","length","successCount","errorCount","response","method","body","JSON","stringify","ok","showNotification","message","Notification","permission","icon","log","requestNotificationPermission","requestPermission"],"sources":["/home/v/Documentos/Github/PDV-onlinesaas/pdv-react-pwa/src/hooks/use-offline-sync.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport {\n  salvarCupomOffline,\n  recuperarCuponsOffline,\n  limparCuponsOffline,\n  contarCuponsOffline,\n} from \"../utils/cupomStorage\";\nimport { buildApiUrl, apiRequest } from \"../utils/api-config\";\n\nexport function useOfflineSync() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [pendingCupons, setPendingCupons] = useState(0);\n  const [isSyncing, setIsSyncing] = useState(false);\n\n  // Verificar status da conexão\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      syncCuponsOffline();\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n    };\n\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n    };\n  }, []);\n\n  // Atualizar contador de cupons pendentes\n  useEffect(() => {\n    const updatePendingCount = async () => {\n      const count = await contarCuponsOffline();\n      setPendingCupons(count);\n    };\n\n    updatePendingCount();\n\n    // Atualizar a cada 5 segundos\n    const interval = setInterval(updatePendingCount, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Função para salvar cupom offline\n  const salvarCupom = useCallback(\n    async (cupom) => {\n      try {\n        if (!isOnline) {\n          await salvarCupomOffline(cupom);\n          setPendingCupons((prev) => prev + 1);\n          return { success: true, offline: true };\n        }\n        return { success: true, offline: false };\n      } catch (error) {\n        console.error(\"Erro ao salvar cupom:\", error);\n        return { success: false, error };\n      }\n    },\n    [isOnline]\n  );\n\n  // Função para sincronizar cupons offline\n  const syncCuponsOffline = useCallback(async () => {\n    if (!isOnline || isSyncing) return;\n\n    setIsSyncing(true);\n    try {\n      const cupons = await recuperarCuponsOffline();\n\n      if (cupons.length === 0) {\n        setIsSyncing(false);\n        return;\n      }\n\n      let successCount = 0;\n      let errorCount = 0;\n\n      for (const cupom of cupons) {\n        try {\n          const response = await apiRequest(buildApiUrl(\"/api/cupom\"), {\n            method: \"POST\",\n            body: JSON.stringify(cupom),\n          });\n\n          if (response.ok) {\n            successCount++;\n          } else {\n            errorCount++;\n          }\n        } catch (error) {\n          console.error(\"Erro ao enviar cupom:\", error);\n          errorCount++;\n        }\n      }\n\n      // Se todos os cupons foram enviados com sucesso, limpar o cache\n      if (errorCount === 0) {\n        await limparCuponsOffline();\n        setPendingCupons(0);\n\n        // Mostrar notificação de sucesso\n        if (successCount > 0) {\n          showNotification(`${successCount} cupons sincronizados com sucesso!`);\n        }\n      } else {\n        // Se houve erros, manter os cupons que falharam\n        setPendingCupons(errorCount);\n        showNotification(\n          `${successCount} cupons sincronizados, ${errorCount} falharam.`\n        );\n      }\n    } catch (error) {\n      console.error(\"Erro na sincronização:\", error);\n      showNotification(\"Erro na sincronização dos cupons.\");\n    } finally {\n      setIsSyncing(false);\n    }\n  }, [isOnline, isSyncing]);\n\n  // Função para mostrar notificações\n  const showNotification = useCallback((message) => {\n    if (\"Notification\" in window && Notification.permission === \"granted\") {\n      new Notification(\"Dominus PDV\", {\n        body: message,\n        icon: \"/logo192.png\",\n      });\n    } else {\n      // Fallback para toast ou alert\n      console.log(message);\n    }\n  }, []);\n\n  // Solicitar permissão para notificações\n  const requestNotificationPermission = useCallback(async () => {\n    if (\"Notification\" in window && Notification.permission === \"default\") {\n      const permission = await Notification.requestPermission();\n      return permission === \"granted\";\n    }\n    return Notification.permission === \"granted\";\n  }, []);\n\n  return {\n    isOnline,\n    pendingCupons,\n    isSyncing,\n    salvarCupom,\n    syncCuponsOffline,\n    requestNotificationPermission,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}