{"ast":null,"code":"var _jsxFileName = \"/home/v/Documentos/Github/PDV-onlinesaas/saas/saas-pwa/src/components/ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { AuthService } from \"../services/authServices\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProtectedRoute({\n  children\n}) {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [hasToken, setHasToken] = useState(false);\n  const [isAuth, setIsAuth] = useState(false);\n  useEffect(() => {\n    const checkAuth = async () => {\n      // Tenta obter o token (ajuste conforme seu AuthService)\n      const token = await AuthService.getToken();\n      setHasToken(!!token);\n      if (token) {\n        // Se tem token, verifica se está autenticado\n        const valid = await AuthService.isAuthenticated();\n        setIsAuth(!!valid);\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n  if (loading) return null; // ou um spinner\n\n  // Se tem token e não está autenticado, redireciona para login\n  if (hasToken && !isAuth) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n  return children;\n}\n_s(ProtectedRoute, \"NizfFkyQmVQHj6AwcMb9v0Nx2tE=\");\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","AuthService","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","loading","setLoading","hasToken","setHasToken","isAuth","setIsAuth","checkAuth","token","getToken","valid","isAuthenticated","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/v/Documentos/Github/PDV-onlinesaas/saas/saas-pwa/src/components/ProtectedRoute.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { AuthService } from \"../services/authServices\";\n\nexport default function ProtectedRoute({ children }) {\n  const [loading, setLoading] = useState(true);\n  const [hasToken, setHasToken] = useState(false);\n  const [isAuth, setIsAuth] = useState(false);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      // Tenta obter o token (ajuste conforme seu AuthService)\n      const token = await AuthService.getToken();\n      setHasToken(!!token);\n      if (token) {\n        // Se tem token, verifica se está autenticado\n        const valid = await AuthService.isAuthenticated();\n        setIsAuth(!!valid);\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n\n  if (loading) return null; // ou um spinner\n\n  // Se tem token e não está autenticado, redireciona para login\n  if (hasToken && !isAuth) {\n    return <Navigate to=\"/login\" replace />;\n  }\n\n  return children;\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,eAAe,SAASC,cAAcA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACnD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAE3CD,SAAS,CAAC,MAAM;IACd,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B;MACA,MAAMC,KAAK,GAAG,MAAMb,WAAW,CAACc,QAAQ,CAAC,CAAC;MAC1CL,WAAW,CAAC,CAAC,CAACI,KAAK,CAAC;MACpB,IAAIA,KAAK,EAAE;QACT;QACA,MAAME,KAAK,GAAG,MAAMf,WAAW,CAACgB,eAAe,CAAC,CAAC;QACjDL,SAAS,CAAC,CAAC,CAACI,KAAK,CAAC;MACpB;MACAR,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IACDK,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIN,OAAO,EAAE,OAAO,IAAI,CAAC,CAAC;;EAE1B;EACA,IAAIE,QAAQ,IAAI,CAACE,MAAM,EAAE;IACvB,oBAAOR,OAAA,CAACH,QAAQ;MAACkB,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;EAEA,OAAOlB,QAAQ;AACjB;AAACC,EAAA,CA5BuBF,cAAc;AAAAoB,EAAA,GAAdpB,cAAc;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}