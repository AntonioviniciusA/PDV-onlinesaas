{"ast":null,"code":"import apiNoToken from \"./apiNoToken\";\nconst planoService = {\n  // Buscar todos os planos\n  async getAllPlans() {\n    try {\n      const response = await apiNoToken.get(\"/plano\");\n      console.log(\"Resposta da API:\", response.data);\n      return response.data.data || [];\n    } catch (error) {\n      var _error$response;\n      console.error(\"Erro ao buscar planos:\", error);\n      console.error(\"Detalhes do erro:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      throw error;\n    }\n  },\n  // Buscar planos por ciclo de cobrança\n  async getPlansByBillingCycle(billingCycle) {\n    try {\n      const response = await apiNoToken.get(`/plano/ciclo/${billingCycle}`);\n      console.log(response);\n      console.log(`Resposta da API para ${billingCycle}:`, response.data);\n      return response.data.data || [];\n    } catch (error) {\n      var _error$response2;\n      console.error(`Erro ao buscar planos ${billingCycle}:`, error);\n      console.error(\"Detalhes do erro:\", (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      throw error;\n    }\n  },\n  // Buscar planos mensais\n  async getMonthlyPlans() {\n    return this.getPlansByBillingCycle(\"monthly\");\n  },\n  // Buscar planos anuais\n  async getAnnuallyPlans() {\n    return this.getPlansByBillingCycle(\"yearly\");\n  },\n  // Buscar plano por ID\n  async getPlanById(id) {\n    try {\n      const response = await apiNoToken.get(`/plano/${id}`);\n      console.log(\"Resposta da API para plano por ID:\", response.data);\n      return response.data.data;\n    } catch (error) {\n      var _error$response3;\n      console.error(\"Erro ao buscar plano:\", error);\n      console.error(\"Detalhes do erro:\", (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data);\n      throw error;\n    }\n  }\n};\nexport default planoService;","map":{"version":3,"names":["apiNoToken","planoService","getAllPlans","response","get","console","log","data","error","_error$response","getPlansByBillingCycle","billingCycle","_error$response2","getMonthlyPlans","getAnnuallyPlans","getPlanById","id","_error$response3"],"sources":["/home/v/Documentos/Github/PDV-onlinesaas/pdv-react-pwa/src/services/plansService.js"],"sourcesContent":["import apiNoToken from \"./apiNoToken\";\n\nconst planoService = {\n  // Buscar todos os planos\n  async getAllPlans() {\n    try {\n      const response = await apiNoToken.get(\"/plano\");\n      console.log(\"Resposta da API:\", response.data);\n      return response.data.data || [];\n    } catch (error) {\n      console.error(\"Erro ao buscar planos:\", error);\n      console.error(\"Detalhes do erro:\", error.response?.data);\n      throw error;\n    }\n  },\n\n  // Buscar planos por ciclo de cobrança\n  async getPlansByBillingCycle(billingCycle) {\n    try {\n      const response = await apiNoToken.get(`/plano/ciclo/${billingCycle}`);\n      console.log(response);\n      console.log(`Resposta da API para ${billingCycle}:`, response.data);\n      return response.data.data || [];\n    } catch (error) {\n      console.error(`Erro ao buscar planos ${billingCycle}:`, error);\n      console.error(\"Detalhes do erro:\", error.response?.data);\n      throw error;\n    }\n  },\n\n  // Buscar planos mensais\n  async getMonthlyPlans() {\n    return this.getPlansByBillingCycle(\"monthly\");\n  },\n\n  // Buscar planos anuais\n  async getAnnuallyPlans() {\n    return this.getPlansByBillingCycle(\"yearly\");\n  },\n\n  // Buscar plano por ID\n  async getPlanById(id) {\n    try {\n      const response = await apiNoToken.get(`/plano/${id}`);\n      console.log(\"Resposta da API para plano por ID:\", response.data);\n      return response.data.data;\n    } catch (error) {\n      console.error(\"Erro ao buscar plano:\", error);\n      console.error(\"Detalhes do erro:\", error.response?.data);\n      throw error;\n    }\n  },\n};\n\nexport default planoService;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,cAAc;AAErC,MAAMC,YAAY,GAAG;EACnB;EACA,MAAMC,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMH,UAAU,CAACI,GAAG,CAAC,QAAQ,CAAC;MAC/CC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEH,QAAQ,CAACI,IAAI,CAAC;MAC9C,OAAOJ,QAAQ,CAACI,IAAI,CAACA,IAAI,IAAI,EAAE;IACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA;MACdJ,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CH,OAAO,CAACG,KAAK,CAAC,mBAAmB,GAAAC,eAAA,GAAED,KAAK,CAACL,QAAQ,cAAAM,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,CAAC;MACxD,MAAMC,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAME,sBAAsBA,CAACC,YAAY,EAAE;IACzC,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMH,UAAU,CAACI,GAAG,CAAC,gBAAgBO,YAAY,EAAE,CAAC;MACrEN,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;MACrBE,OAAO,CAACC,GAAG,CAAC,wBAAwBK,YAAY,GAAG,EAAER,QAAQ,CAACI,IAAI,CAAC;MACnE,OAAOJ,QAAQ,CAACI,IAAI,CAACA,IAAI,IAAI,EAAE;IACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAI,gBAAA;MACdP,OAAO,CAACG,KAAK,CAAC,yBAAyBG,YAAY,GAAG,EAAEH,KAAK,CAAC;MAC9DH,OAAO,CAACG,KAAK,CAAC,mBAAmB,GAAAI,gBAAA,GAAEJ,KAAK,CAACL,QAAQ,cAAAS,gBAAA,uBAAdA,gBAAA,CAAgBL,IAAI,CAAC;MACxD,MAAMC,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMK,eAAeA,CAAA,EAAG;IACtB,OAAO,IAAI,CAACH,sBAAsB,CAAC,SAAS,CAAC;EAC/C,CAAC;EAED;EACA,MAAMI,gBAAgBA,CAAA,EAAG;IACvB,OAAO,IAAI,CAACJ,sBAAsB,CAAC,QAAQ,CAAC;EAC9C,CAAC;EAED;EACA,MAAMK,WAAWA,CAACC,EAAE,EAAE;IACpB,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMH,UAAU,CAACI,GAAG,CAAC,UAAUY,EAAE,EAAE,CAAC;MACrDX,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEH,QAAQ,CAACI,IAAI,CAAC;MAChE,OAAOJ,QAAQ,CAACI,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAS,gBAAA;MACdZ,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CH,OAAO,CAACG,KAAK,CAAC,mBAAmB,GAAAS,gBAAA,GAAET,KAAK,CAACL,QAAQ,cAAAc,gBAAA,uBAAdA,gBAAA,CAAgBV,IAAI,CAAC;MACxD,MAAMC,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeP,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}